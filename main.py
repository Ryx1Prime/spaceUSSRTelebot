import telebot
from telebot import types
import random
import json
import requests
import threading
import time
import os
API = 'db53663bae2e3b33d925fcb7279e77a2'
bot = telebot.TeleBot('#your token')
user_data = {}

GIFS = [
    "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExa29paWhiajY3N29tNzdzbmtqMjU2ZXljNTFoeDhiaHprcHo3ZWo4bCZlcD12MV9naWZzX3NlYXJjaCZjdD1n/9tx0gy37p7oXu/giphy.gif",
    "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExa29paWhiajY3N29tNzdzbmtqMjU2ZXljNTFoeDhiaHprcHo3ZWo4bCZlcD12MV9naWZzX3NlYXJjaCZjdD1n/3oKIPtjElfqwMOTbH2/giphy.gif",
    "https://media.giphy.com/media/l0IyjcSmE0QPTBhAs/giphy.gif",
    "https://media.giphy.com/media/GuFALVnrfpNhm/giphy.gif",
    "https://media.giphy.com/media/5yaou1jFxTV6M/giphy.gif",
    "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExa29paWhiajY3N29tNzdzbmtqMjU2ZXljNTFoeDhiaHprcHo3ZWo4bCZlcD12MV9naWZzX3NlYXJjaCZjdD1n/kiWlpxD6hXmvTL8dio/giphy.gif",
    "https://media.giphy.com/media/3o7TKCTt7cNHg10utO/giphy.gif",
    "https://media.giphy.com/media/3o7TKWvwyGpgtlxQFq/giphy.gif",
    "https://media.giphy.com/media/yGgdwo7YfmrNS/giphy.gif",
    "https://media.giphy.com/media/xT0BKEksASgc4OJGxy/giphy.gif",
    "https://media.giphy.com/media/tdC6N1RKNp4swre2JY/giphy.gif",
    "https://media.giphy.com/media/GyJ8p0Um850ic/giphy.gif",
    "https://media.giphy.com/media/YRzQnWzbn4WIxd3ZYx/giphy.gif",
    "https://media.giphy.com/media/xT39CTrFW4nHLdBPpu/giphy.gif",
    "https://media.giphy.com/media/SVCSsoKU5v6ZJLk07n/giphy.gif",
    "https://media.giphy.com/media/Tpkr2CSADfZwJUwTlD/giphy.gif"
]

FACTS = [
    "üêï **–°–æ–±–∞–∫–∏-–∫–æ—Å–º–æ–Ω–∞–≤—Ç—ã –ë–µ–ª–∫–∞ –∏ –°—Ç—Ä–µ–ª–∫–∞** (1960) —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—ë—Ç–∞ –∂–∏–≤—ã–º. –°—Ç—Ä–µ–ª–∫–∞ –ø–æ–∑–∂–µ —Ä–æ–¥–∏–ª–∞ –∑–¥–æ—Ä–æ–≤—ã—Ö —â–µ–Ω–∫–æ–≤!",
    "üöÄ **–ü–µ—Ä–≤—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫** (1957) ‚Äî ¬´–°–ø—É—Ç–Ω–∏–∫-1¬ª –≤–µ—Å–∏–ª –≤—Å–µ–≥–æ 84 –∫–≥ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ¬´–±–∏–ø-–±–∏–ø¬ª, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≤–∏–ª–∏ —Ä–∞–¥–∏–æ–ª—é–±–∏—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.",
    "üåï **–¢–∞–π–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –õ—É–Ω—ã** (1959) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è ¬´–õ—É–Ω–∞-3¬ª –≤–ø–µ—Ä–≤—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–ª–∞ –Ω–µ–≤–∏–¥–∏–º—É—é —Å –ó–µ–º–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É –õ—É–Ω—ã, –æ—Ç–∫—Ä—ã–≤ –º–∏—Ä—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç.",
    "üë®‚ÄçüöÄ **108 –º–∏–Ω—É—Ç, –∏–∑–º–µ–Ω–∏–≤—à–∏–µ –º–∏—Ä** (1961) ‚Äî –ü–æ–ª—ë—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞ –¥–ª–∏–ª—Å—è –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å–æ–≤, –Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞ —Å–¥–µ–ª–∞–ª –°–°–°–† –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Ü–µ–º –∫–æ—Å–º–æ—Å–∞. –ï–≥–æ –ø–æ–∑—ã–≤–Ω–æ–π ¬´–ö–µ–¥—Ä¬ª –∑–Ω–∞–ª–∞ –≤—Å—è –ø–ª–∞–Ω–µ—Ç–∞!",
    "üõ∞Ô∏è **–°–ø—É—Ç–Ω–∏–∫-—à–ø–∏–æ–Ω —Å —Å—é—Ä–ø—Ä–∏–∑–æ–º** (1960-–µ) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∏–µ –∞–ø–ø–∞—Ä–∞—Ç—ã ¬´–ó–µ–Ω–∏—Ç¬ª –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏ –∫–∞–ø—Å—É–ª—ã —Å –ø–ª—ë–Ω–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–∫–∞–ª–∏ –≤ —Ç–∞–π–≥–µ —Å –≤–µ—Ä—Ç–æ–ª—ë—Ç–æ–≤. –û–¥–Ω–∞–∂–¥—ã –º–µ–¥–≤–µ–¥–∏ –ø—Ä–∏–Ω—è–ª–∏ –∫–∞–ø—Å—É–ª—É –∑–∞ –º—ë–¥ –∏ –ø–æ–≤—Ä–µ–¥–∏–ª–∏ –µ—ë!",
    "üåå **–†–µ–∫–æ—Ä–¥ –í–µ–Ω–µ—Ä—ã** (1970) ‚Äî ¬´–í–µ–Ω–µ—Ä–∞-7¬ª —Å–æ–≤–µ—Ä—à–∏–ª–∞ –ø–µ—Ä–≤—É—é –º—è–≥–∫—É—é –ø–æ—Å–∞–¥–∫—É –Ω–∞ –∞–¥—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –í–µ–Ω–µ—Ä—ã (465¬∞C!) –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ 23 –º–∏–Ω—É—Ç—ã ‚Äî –ø–æ–¥–≤–∏–≥ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –º—ã—Å–ª–∏.",
    "üî≠ **–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç–µ–ª–µ—Å–∫–æ–ø-–Ω–µ–≤–∏–¥–∏–º–∫–∞** (1983) ‚Äî ¬´–ê—Å—Ç—Ä–æ–Ω¬ª —Å –∑–µ—Ä–∫–∞–ª–æ–º 80 —Å–º —Å—Ç–∞–ª –∫—Ä—É–ø–Ω–µ–π—à–∏–º —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º —Ç–µ–ª–µ—Å–∫–æ–ø–æ–º —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–∫—Ä—ã–ª —Ç—ã—Å—è—á–∏ –Ω–æ–≤—ã—Ö –≥–∞–ª–∞–∫—Ç–∏–∫.",
    "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —á–µ–ª–Ω–æ–∫** (1988) ‚Äî ¬´–ë—É—Ä–∞–Ω¬ª —Å–æ–≤–µ—Ä—à–∏–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª—ë—Ç –≤–æ–æ–±—â–µ –±–µ–∑ —ç–∫–∏–ø–∞–∂–∞, –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω–∞—è –Ω–∞ –ó–∞–ø–∞–¥–µ.",
    "üëæ **–õ—É–Ω–æ—Ö–æ–¥—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º** (1970-–µ) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∏–µ –ª—É–Ω–æ—Ö–æ–¥—ã –º–æ–≥–ª–∏ ¬´–ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è¬ª –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å –ó–µ–º–ª–∏, –≥—Ä–µ–ª–∏—Å—å —è–¥–µ—Ä–Ω—ã–º –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –Ω–∞ –õ—É–Ω–µ ¬´–∞–≤—Ç–æ–≥—Ä–∞—Ñ—ã¬ª ‚Äî –∑–µ—Ä–∫–∞–ª–∞ –¥–ª—è –ª–∞–∑–µ—Ä–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
    "üõ∞Ô∏è **–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫** (1970-–µ) ‚Äî –ö–∞–∂–¥—ã–π –Ω–∞—É—á–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ —Å–µ—Ä–∏–∏ ¬´–ö–æ—Å–º–æ—Å¬ª –Ω–∞ –¥–µ–ª–µ –º–æ–≥ –±—ã—Ç—å –≤–æ–µ–Ω–Ω—ã–º, –∞ –∏—Ö –Ω–∞—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å–µ–∫—Ä–µ—á–∏–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å!",
    "üå† **–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è-–¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—å** (1986-2001) ‚Äî ¬´–ú–∏—Ä¬ª –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∞ –≤ 3 —Ä–∞–∑–∞ –¥–æ–ª—å—à–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –∏ —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤—ã–º ¬´–∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –¥–æ–º–æ–º¬ª –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —ç–∫–∏–ø–∞–∂–µ–π.",
    "‚ö° **–≠–Ω–µ—Ä–≥–∏—è —è–¥—Ä–∞ –≤ –∫–æ—Å–º–æ—Å–µ** (1960-–µ) ‚Äî –°–°–°–† –∑–∞–ø—É—Å–∫–∞–ª —Å–ø—É—Ç–Ω–∏–∫–∏ —Å —è–¥–µ—Ä–Ω—ã–º–∏ —Ä–µ–∞–∫—Ç–æ—Ä–∞–º–∏ –Ω–∞ –±–æ—Ä—Ç—É. ¬´–ö–æ—Å–º–æ—Å-1867¬ª –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –æ—Ä–±–∏—Ç–µ —Ü–µ–ª—ã–π –≥–æ–¥!",
    "üß™ **–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–ª—Ö–∏–º–∏—è** (1990-–µ) ‚Äî –ù–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–ú–∏—Ä¬ª –≤—ã—Ä–∞—â–∏–≤–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –∑–µ–º–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
    "üõ∏ **–û—Ö–æ—Ç–∞ –∑–∞ –ù–õ–û** (1978) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∏–µ –í–í–° –∏–º–µ–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–∏–ª–æ—Ç–æ–≤ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å ¬´–∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–¥—É—à–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏¬ª ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å—Å–µ–∫—Ä–µ—Ç–∏–ª–∏ –≤ 2000-—Ö.",
    "üåë **–õ—É–Ω–Ω—ã–µ —Ä–æ–±–æ—Ç—ã-—Ä–∞–∑–≤–µ–¥—á–∏–∫–∏** (1970) ‚Äî –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ª—É–Ω–æ—Ö–æ–¥–æ–≤ –°–°–°–† —Å–±—Ä–æ—Å–∏–ª –Ω–∞ –õ—É–Ω—É –¥–≤–∞ ¬´—à–∞–≥–∞—é—â–∏—Ö¬ª –∞–ø–ø–∞—Ä–∞—Ç–∞ –ü—Ä–û–ü-–ú ‚Äî –æ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ –ª—ã–∂–∞—Ö!",
    "üöÄ **–†–∞–∫–µ—Ç–∞, –æ–ø–µ—Ä–µ–¥–∏–≤—à–∞—è –≤—Ä–µ–º—è** (1960-–µ) ‚Äî ¬´–ù-1¬ª –º–æ–≥–ª–∞ –±—ã –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç—Å–∫–∏—Ö –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ –Ω–∞ –õ—É–Ω—É, –Ω–æ –µ—ë –¥–≤–∏–≥–∞—Ç–µ–ª–∏ (30 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!) –æ–∫–∞–∑–∞–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º–∏ –¥–ª—è —Å–≤–æ–µ–π —ç–ø–æ—Ö–∏."
]

sent_facts = {}

stats_file = "user_stats.json"
def load_stats():
    if os.path.exists(stats_file):
        with open(stats_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}
def save_stats(stats):
    with open(stats_file, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)
user_stats = load_stats()

QUOTES = [
    "¬´–ü–æ–µ—Ö–∞–ª–∏!¬ª ‚Äî –Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω",
    "¬´–ó–µ–º–ª—è ‚Äî –∫–æ–ª—ã–±–µ–ª—å —Ä–∞–∑—É–º–∞, –Ω–æ –Ω–µ–ª—å–∑—è –≤–µ—á–Ω–æ –∂–∏—Ç—å –≤ –∫–æ–ª—ã–±–µ–ª–∏.¬ª ‚Äî –ö.–≠. –¶–∏–æ–ª–∫–æ–≤—Å–∫–∏–π",
    "¬´–£–≤–∏–¥–µ—Ç—å –ó–µ–º–ª—é –∏–∑ –∫–æ—Å–º–æ—Å–∞ ‚Äî –∑–Ω–∞—á–∏—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º—ã –≤—Å–µ –æ–¥–Ω–∞ —Å–µ–º—å—è.¬ª ‚Äî –ê–ª–µ–∫—Å–µ–π –õ–µ–æ–Ω–æ–≤",
    "¬´–î–æ—Ä–æ–≥–∞ –≤ –∫–æ—Å–º–æ—Å –æ—Ç–∫—Ä—ã—Ç–∞!¬ª ‚Äî –°–µ—Ä–≥–µ–π –ö–æ—Ä–æ–ª—ë–≤",
    "¬´–Ø ‚Äî —Å–æ–≤–µ—Ç—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫, –∏ —ç—Ç–∏–º –≥–æ—Ä–∂—É—Å—å!¬ª ‚Äî –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞",
    "¬´–ö–æ—Å–º–æ—Å ‚Äî —ç—Ç–æ –±—É–¥—É—â–µ–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.¬ª ‚Äî –°–µ—Ä–≥–µ–π –ö–æ—Ä–æ–ª—ë–≤",
    "¬´–í –∫–æ—Å–º–æ—Å–µ –Ω–µ—Ç –¥–æ—Ä–æ–≥, –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.¬ª ‚Äî –ê–ª–µ–∫—Å–µ–π –õ–µ–æ–Ω–æ–≤",
    "¬´–Ø –≤–∏–∂—É –ó–µ–º–ª—é! –û–Ω–∞ —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è!¬ª ‚Äî –Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω",
    "¬´–ö–æ—Å–º–æ—Å ‚Äî —ç—Ç–æ –Ω–µ —Ç–∞–∫ –¥–∞–ª–µ–∫–æ, –∫–∞–∫ –∫–∞–∂–µ—Ç—Å—è.¬ª ‚Äî –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞",
    "¬´–ì–ª–∞–≤–Ω–æ–µ ‚Äî –º–µ—á—Ç–∞—Ç—å –∏ –≤–µ—Ä–∏—Ç—å!¬ª ‚Äî –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞"
]

PLANET_WEATHER = {
    "–ú–µ—Ä–∫—É—Ä–∏–π": {"desc": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω—ë–º –¥–æ +430¬∞C, –Ω–æ—á—å—é –¥–æ -180¬∞C. –ê—Ç–º–æ—Å—Ñ–µ—Ä—ã –ø–æ—á—Ç–∏ –Ω–µ—Ç.", "temp": "+430¬∞C / -180¬∞C"},
    "–í–µ–Ω–µ—Ä–∞": {"desc": "–ü–ª–æ—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ –≤ 90 —Ä–∞–∑ –≤—ã—à–µ –∑–µ–º–Ω–æ–≥–æ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ +470¬∞C, –∫–∏—Å–ª–æ—Ç–Ω—ã–µ –æ–±–ª–∞–∫–∞.", "temp": "+470¬∞C"},
    "–ó–µ–º–ª—è": {"desc": "–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–æ–¥–∞ –≤ –∂–∏–¥–∫–æ–º –≤–∏–¥–µ, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –ø–æ–≥–æ–¥–∞.", "temp": "-90¬∞C –¥–æ +60¬∞C"},
    "–ú–∞—Ä—Å": {"desc": "–¢–æ–Ω–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —á–∞—Å—Ç—ã–µ –ø—ã–ª–µ–≤—ã–µ –±—É—Ä–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç -140¬∞C –¥–æ +30¬∞C.", "temp": "-140¬∞C –¥–æ +30¬∞C"},
    "–Æ–ø–∏—Ç–µ—Ä": {"desc": "–ì–∞–∑–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç, —Å–∏–ª—å–Ω—ã–µ –≤–µ—Ç—Ä—ã, –ë–æ–ª—å—à–æ–µ –ö—Ä–∞—Å–Ω–æ–µ –ü—è—Ç–Ω–æ ‚Äî –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π —à—Ç–æ—Ä–º.", "temp": "-145¬∞C"},
    "–°–∞—Ç—É—Ä–Ω": {"desc": "–ì–∞–∑–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç, –º–æ—â–Ω—ã–µ –≤–µ—Ç—Ä—ã, –º–µ—Ç–∞–Ω–æ–≤—ã–µ –æ–±–ª–∞–∫–∞.", "temp": "-178¬∞C"},
    "–£—Ä–∞–Ω": {"desc": "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, —Å–∏–ª—å–Ω—ã–µ –≤–µ—Ç—Ä—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏–∑ –≤–æ–¥–æ—Ä–æ–¥–∞, –≥–µ–ª–∏—è –∏ –º–µ—Ç–∞–Ω–∞.", "temp": "-224¬∞C"},
    "–ù–µ–ø—Ç—É–Ω": {"desc": "–°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –≤–µ—Ç—Ä—ã –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ.", "temp": "-218¬∞C"},
    "–ü–ª—É—Ç–æ–Ω": {"desc": "–ö–∞—Ä–ª–∏–∫–æ–≤–∞—è –ø–ª–∞–Ω–µ—Ç–∞, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ -230¬∞C, —Ä–∞–∑—Ä–µ–∂—ë–Ω–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏–∑ –∞–∑–æ—Ç–∞ –∏ –º–µ—Ç–∞–Ω–∞.", "temp": "-230¬∞C"},
    "–ï–≤—Ä–æ–ø–∞": {"desc": "–°–ø—É—Ç–Ω–∏–∫ –Æ–ø–∏—Ç–µ—Ä–∞, –ª–µ–¥—è–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–æ–¥–ª—ë–¥–Ω—ã–π –æ–∫–µ–∞–Ω, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ -160¬∞C.", "temp": "-160¬∞C"},
    "–¢–∏—Ç–∞–Ω": {"desc": "–°–ø—É—Ç–Ω–∏–∫ –°–∞—Ç—É—Ä–Ω–∞, –≥—É—Å—Ç–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –º–µ—Ç–∞–Ω–æ–≤—ã–µ –¥–æ–∂–¥–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ -180¬∞C.", "temp": "-180¬∞C"},
    "–ò–æ": {"desc": "–°–ø—É—Ç–Ω–∏–∫ –Æ–ø–∏—Ç–µ—Ä–∞, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –≤—É–ª–∫–∞–Ω–æ–≤, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç -143¬∞C –¥–æ -163¬∞C.", "temp": "-143¬∞C –¥–æ -163¬∞C"}
}

WEATHER_TRUE_FALSE = [
    {"q": "–ù–∞ –í–µ–Ω–µ—Ä–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ, —á–µ–º –Ω–∞ –ú–µ—Ä–∫—É—Ä–∏–∏.", "a": True},
    {"q": "–ù–∞ –ú–∞—Ä—Å–µ –±—ã–≤–∞—é—Ç –ø—ã–ª–µ–≤—ã–µ –±—É—Ä–∏, –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –≤—Å—é –ø–ª–∞–Ω–µ—Ç—É.", "a": True},
    {"q": "–ù–∞ –Æ–ø–∏—Ç–µ—Ä–µ —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ, —á–µ–º –Ω–∞ –ó–µ–º–ª–µ.", "a": False},
    {"q": "–ù–∞ –°–∞—Ç—É—Ä–Ω–µ –∏–¥—É—Ç –∞–ª–º–∞–∑–Ω—ã–µ –¥–æ–∂–¥–∏.", "a": True},
    {"q": "–ù–∞ –ú–µ—Ä–∫—É—Ä–∏–∏ –µ—Å—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –∑–µ–º–Ω—É—é.", "a": False},
    {"q": "–ù–∞ –£—Ä–∞–Ω–µ –∏ –ù–µ–ø—Ç—É–Ω–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –≤–µ—Ç—Ä—ã.", "a": True},
    {"q": "–ù–∞ –ó–µ–º–ª–µ —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç.", "a": False},
    {"q": "–ü–ª—É—Ç–æ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–ª–∞–Ω–µ—Ç–æ–π –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.", "a": False},
    {"q": "–ù–∞ –¢–∏—Ç–∞–Ω–µ –µ—Å—Ç—å –º–µ—Ç–∞–Ω–æ–≤—ã–µ –æ–∑—ë—Ä–∞ –∏ –¥–æ–∂–¥–∏.", "a": True},
    {"q": "–ï–≤—Ä–æ–ø–∞ ‚Äî —ç—Ç–æ —Å–ø—É—Ç–Ω–∏–∫ –Æ–ø–∏—Ç–µ—Ä–∞, –ø–æ–∫—Ä—ã—Ç—ã–π –ª—å–¥–æ–º.", "a": True},
    {"q": "–ò–æ ‚Äî —ç—Ç–æ —Å–ø—É—Ç–Ω–∏–∫ –ú–∞—Ä—Å–∞.", "a": False},
    {"q": "–í –°–°–°–† –±—ã–ª –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–≤—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –ó–µ–º–ª–∏.", "a": True},
    {"q": "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞ ‚Äî –ø–µ—Ä–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞-–∫–æ—Å–º–æ–Ω–∞–≤—Ç.", "a": True},
    {"q": "–ù–∞ –õ—É–Ω–µ –µ—Å—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø—Ä–∏–≥–æ–¥–Ω–∞—è –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è.", "a": False},
    {"q": "–ì–∞–≥–∞—Ä–∏–Ω –æ–±–ª–µ—Ç–µ–ª –ó–µ–º–ª—é –∑–∞ 108 –º–∏–Ω—É—Ç.", "a": True}
]

@bot.message_handler(commands=['start'])
def button_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üöÄ"))
    markup.add(types.KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ –±–æ—Ä—Ç–æ–º"))
    markup.add(types.KeyboardButton("–°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
    markup.add(types.KeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    markup.add(types.KeyboardButton("–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"))
    markup.add(types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    markup.add(types.KeyboardButton("–£–≥–∞–¥–∞–π –ø–ª–∞–Ω–µ—Ç—É –ø–æ –ø–æ–≥–æ–¥–µ"))
    markup.add(types.KeyboardButton("–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å: –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å! –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –≤–µ–ª–∏–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –°–°–°–† –≤ –∫–æ—Å–º–æ—Å–µ. üåå\n\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üöÄ')
def send_fact(message):
    user_id = str(message.from_user.id)
    if user_id not in sent_facts or len(sent_facts[user_id]) == len(FACTS):
        sent_facts[user_id] = set()
    available = [i for i in range(len(FACTS)) if i not in sent_facts[user_id]]
    idx = random.choice(available)
    sent_facts[user_id].add(idx)
    fact = FACTS[idx]
    gif = GIFS[idx]
    bot.send_animation(message.chat.id, gif)
    bot.send_message(message.chat.id, f"üì° <b>–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –°–°–°–†:</b>\n\n{fact}", parse_mode="HTML")
    user_stats.setdefault(user_id, {"facts": 0, "quizzes": 0, "max_score": 0, "guess_planet": 0, "true_false": 0})
    user_stats[user_id]["facts"] += 1
    save_stats(user_stats)

@bot.message_handler(func=lambda message: message.text == "–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è")
def send_quote(message):
    quote = random.choice(QUOTES)
    bot.send_message(message.chat.id, f"üõ∞Ô∏è <b>–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ü–∏—Ç–∞—Ç–∞:</b>\n\n{quote}", parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def my_stats(message):
    user_id = str(message.from_user.id)
    stats = user_stats.get(user_id, {
        "facts": 0,
        "quizzes": 0,
        "max_score": 0,
        "guess_planet": 0,
        "true_false": 0
    })
    bot.send_message(
        message.chat.id,
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"–§–∞–∫—Ç–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {stats.get('facts', 0)}\n"
        f"–í–∏–∫—Ç–æ—Ä–∏–Ω —Å—ã–≥—Ä–∞–Ω–æ: {stats.get('quizzes', 0)}\n"
        f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–µ–∫—Ç–æ—Ä–∏–Ω–µ: {stats.get('max_score', 0)} –±–∞–ª–ª–æ–≤\n"
        f"–ò–≥—Ä '–£–≥–∞–¥–∞–π –ø–ª–∞–Ω–µ—Ç—É': {stats.get('guess_planet', 0)}\n"
        f"–ò–≥—Ä '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å': {stats.get('true_false', 0)}",
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
def feedback(message):
    bot.send_message(message.chat.id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ. –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—é!")
    bot.register_next_step_handler(message, save_feedback)
def save_feedback(message):
    username = message.from_user.username or "–Ω–µ—Ç username"
    with open("feedback.txt", "a", encoding="utf-8") as f:
        f.write(f"@{username}: {message.text}\n")
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üöÄ")

@bot.message_handler(func=lambda message: message.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ –±–æ—Ä—Ç–æ–º")
def ask_city(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–≥–æ—Ä–æ–¥–∞</b> –º–∏–º–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ø—Ä–æ–ª–µ—Ç–∞–µ–º", parse_mode="HTML")
    bot.register_next_step_handler(message, send_weather)
def send_weather(message):
    city = message.text.strip().lower()
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric')
    if res.status_code == 200:
        data = json.loads(res.text)
        temp = data["main"]["temp"]
        bot.reply_to(message, f"–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞: {temp}‚ÑÉ")
    else:
        bot.reply_to(message, "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∞ –ó–µ–º–ª–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥)")
        bot.register_next_step_handler(message, ask_city)

@bot.message_handler(func=lambda message: message.text == "–£–≥–∞–¥–∞–π –ø–ª–∞–Ω–µ—Ç—É –ø–æ –ø–æ–≥–æ–¥–µ")
def guess_planet(message):
    user_id = str(message.from_user.id)
    planet, info = random.choice(list(PLANET_WEATHER.items()))
    user_data[message.from_user.id] = {"planet": planet}
    options = random.sample(list(PLANET_WEATHER.keys()), 3)
    if planet not in options:
        options[0] = planet
    random.shuffle(options)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        markup.add(types.KeyboardButton(opt))
    markup.add(types.KeyboardButton("–Ø –Ω–µ –∑–Ω–∞—é"))
    bot.send_message(message.chat.id, f"–ù–∞ –∫–∞–∫–æ–π –ø–ª–∞–Ω–µ—Ç–µ –∏–ª–∏ —Å–ø—É—Ç–Ω–∏–∫–µ —Ç–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?\n\n{info['desc']}", reply_markup=markup)
    user_stats.setdefault(user_id, {"facts": 0, "quizzes": 0, "max_score": 0, "guess_planet": 0, "true_false": 0})
    if "guess_planet" not in user_stats[user_id]:
        user_stats[user_id]["guess_planet"] = 0
    user_stats[user_id]["guess_planet"] += 1
    save_stats(user_stats)
    bot.register_next_step_handler(message, check_guess_planet)

def check_guess_planet(message):
    planet = user_data.get(message.from_user.id, {}).get("planet")
    if not planet:
        bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
        return
    if message.text == planet:
        bot.send_message(message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ " + planet + "!")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –±—ã–ª–∞ {planet}.")
    button_start(message)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å: –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞")
def true_false_weather(message):
    user_id = str(message.from_user.id)
    q = random.choice(WEATHER_TRUE_FALSE)
    user_data[message.from_user.id] = {"tf_answer": q["a"]}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–∞–≤–¥–∞"), types.KeyboardButton("–õ–æ–∂—å"))
    markup.add(types.KeyboardButton("–Ø –Ω–µ –∑–Ω–∞—é"))
    user_stats.setdefault(user_id, {"facts": 0, "quizzes": 0, "max_score": 0, "guess_planet": 0, "true_false": 0})
    if "true_false" not in user_stats[user_id]:
        user_stats[user_id]["true_false"] = 0
    user_stats[user_id]["true_false"] += 1
    save_stats(user_stats)
    bot.send_message(message.chat.id, q["q"], reply_markup=markup)
    bot.register_next_step_handler(message, check_true_false_weather)

def check_true_false_weather(message):
    answer = user_data.get(message.from_user.id, {}).get("tf_answer")
    if answer is None:
        bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
        return
    if message.text == "–ü—Ä–∞–≤–¥–∞" and answer is True or message.text == "–õ–æ–∂—å" and answer is False:
        bot.send_message(message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ!")
    elif message.text == "–Ø –Ω–µ –∑–Ω–∞—é":
        bot.send_message(message.chat.id, "–≠—Ç–æ –±—ã–ª –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ! –û—Ç–≤–µ—Ç: " + ("–ü—Ä–∞–≤–¥–∞" if answer else "–õ–æ–∂—å"))
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –û—Ç–≤–µ—Ç: " + ("–ü—Ä–∞–≤–¥–∞" if answer else "–õ–æ–∂—å"))
    button_start(message)

@bot.message_handler(func=lambda message: message.text == "–°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
def choose_tema(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    markup.add(types.KeyboardButton("–ö–æ—Å–º–æ–Ω–∞–≤—Ç—ã"), types.KeyboardButton("–°–ø—É—Ç–Ω–∏–∫–∏"))
    markup.add(types.KeyboardButton("–°—Ç–∞–Ω—Ü–∏–∏"), types.KeyboardButton("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã', reply_markup=markup)

def load_questions(topic):
    with open(f"{topic}.json", "r", encoding="utf-8") as file:
        data = json.load(file)
        questions = data["questions"]
        return {
            "easy": questions[:6],
            "medium": questions[6:14],
            "hard": questions[14:]
        }

@bot.message_handler(func=lambda msg: msg.text in ["–ö–æ—Å–º–æ–Ω–∞–≤—Ç—ã", "–°–ø—É—Ç–Ω–∏–∫–∏", "–°—Ç–∞–Ω—Ü–∏–∏", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"])
def start_quiz(message):
    user_id = str(message.from_user.id)
    topic = message.text.lower()
    user_data[user_id] = {
        "topic": topic,
        "score": 0,
        "questions": load_questions(topic),
        "current_question": None,
        "timer": None
    }
    user_stats.setdefault(user_id, {"facts": 0, "quizzes": 0, "max_score": 0, "guess_planet": 0, "true_false": 0})
    user_stats[user_id]["quizzes"] += 1
    save_stats(user_stats)
    ask_difficulty(message.chat.id, user_id)

def ask_difficulty(chat_id, user_id):
    markup = types.ReplyKeyboardMarkup(row_width=3)
    markup.add(types.KeyboardButton("üü¢ –õ—ë–≥–∫–∏–π"), types.KeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π"), types.KeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π"))
    markup.add(types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
    questions_left = ""
    for diff, questions in user_data[user_id]["questions"].items():
        if questions:
            emoji = "üü¢" if diff == "easy" else "üü°" if diff == "medium" else "üî¥"
            questions_left += f"{emoji} {len(questions)} | "
    bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:\n(–û—Å—Ç–∞–ª–æ—Å—å: {questions_left[:-2]})", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ["üü¢ –õ—ë–≥–∫–∏–π", "üü° –°—Ä–µ–¥–Ω–∏–π", "üî¥ –°–ª–æ–∂–Ω—ã–π"])
def set_difficulty(message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        return choose_tema(message)
    difficulty_map = {
        "üü¢ –õ—ë–≥–∫–∏–π": "easy",
        "üü° –°—Ä–µ–¥–Ω–∏–π": "medium",
        "üî¥ –°–ª–æ–∂–Ω—ã–π": "hard"
    }
    difficulty = difficulty_map[message.text]
    if not user_data[user_id]["questions"][difficulty]:
        bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å—ã —É—Ä–æ–≤–Ω—è {message.text} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        return ask_difficulty(message.chat.id, user_id)
    question = user_data[user_id]["questions"][difficulty].pop(0)
    user_data[user_id]["current_question"] = {
        "question": question,
        "difficulty": difficulty
    }
    send_question(message.chat.id, user_id)

def send_question(chat_id, user_id):
    question_data = user_data[user_id]["current_question"]
    question = question_data["question"]
    difficulty = question_data["difficulty"]
    options = question["options"]
    random.shuffle(options)
    markup = types.InlineKeyboardMarkup()
    row = []
    for i, option in enumerate(options):
        callback_data = f"ans_{i}_{option}"
        row.append(types.InlineKeyboardButton(option, callback_data=callback_data))
        if len(row) == 2:
            markup.row(*row)
            row = []
    if row:
        markup.row(*row)
    diff_emoji = "üü¢" if difficulty == "easy" else "üü°" if difficulty == "medium" else "üî¥"
    timer_seconds = 30
    msg = bot.send_message(
        chat_id,
        f"{diff_emoji} –í–æ–ø—Ä–æ—Å ({difficulty.capitalize()}):\n\n{question['question']}\n\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {timer_seconds} —Å–µ–∫.",
        reply_markup=markup
    )
    user_data[user_id]["question_msg_id"] = msg.message_id
    user_data[user_id]["timer_seconds"] = timer_seconds
    user_data[user_id]["timer_cancel"] = False
    user_data[user_id]["timer_start"] = time.time()

    def update_timer():
        for sec in range(timer_seconds - 1, 0, -1):
            if user_id not in user_data or user_data[user_id].get("timer_cancel"):
                break
            next_tick = user_data[user_id]["timer_start"] + (timer_seconds - sec)
            sleep_time = max(0, next_tick - time.time())
            time.sleep(sleep_time)
            if user_id not in user_data or user_data[user_id].get("timer_cancel"):
                break
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=msg.message_id,
                    text=f"{diff_emoji} –í–æ–ø—Ä–æ—Å ({difficulty.capitalize()}):\n\n{question['question']}\n\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {sec} —Å–µ–∫.",
                    reply_markup=markup
                )
            except:
                pass
            user_data[user_id]["timer_seconds"] = sec
    threading.Thread(target=update_timer, daemon=True).start()
    if user_data[user_id].get("timer"):
        user_data[user_id]["timer"].cancel()
    timer = threading.Timer(timer_seconds, timeout_question, args=[chat_id, user_id])
    user_data[user_id]["timer"] = timer
    timer.start()

def timeout_question(chat_id, user_id):
    if user_id in user_data and not user_data[user_id].get("timer_cancel"):
        user_data[user_id]["timer_cancel"] = True
        question = user_data[user_id]["current_question"]["question"]
        bot.send_message(chat_id, f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}\n{question['explanation']}")
        ask_difficulty(chat_id, user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    user_id = str(call.from_user.id)
    if user_id not in user_data:
        return
    user_data[user_id]["timer_cancel"] = True
    if user_data[user_id].get("timer"):
        user_data[user_id]["timer"].cancel()
    parts = call.data.split("_")
    selected_idx = int(parts[1])
    selected_text = "_".join(parts[2:])
    question = user_data[user_id]["current_question"]["question"]
    difficulty = user_data[user_id]["current_question"]["difficulty"]
    if selected_text == question["answer"]:
        points = {"easy": 1, "medium": 3, "hard": 5}[difficulty]
        user_data[user_id]["score"] += points
        response = f"‚úÖ –í–µ—Ä–Ω–æ! +{points} –±–∞–ª–ª–æ–≤"
    else:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}"
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n\n{response}",
            reply_markup=None
        )
    except:
        pass
    bot.send_message(call.message.chat.id, f"üìö –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{question['explanation']}\n\n–¢–≤–æ–π —Å—á–µ—Ç: {user_data[user_id]['score']}")
    total_questions_left = sum(len(q) for q in user_data[user_id]["questions"].values())
    if total_questions_left == 0:
        finish_quiz(call.message.chat.id, user_id)
    else:
        ask_difficulty(call.message.chat.id, user_id)

@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
def quit_quiz(message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ '–°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return
    user_data[user_id]["timer_cancel"] = True
    if user_data[user_id].get("timer"):
        user_data[user_id]["timer"].cancel()
    finish_quiz(message.chat.id, user_id, manual=True)

def finish_quiz(chat_id, user_id, manual=False):
    score = user_data[user_id]["score"]
    topic = user_data[user_id]["topic"]
    if score >= 30:
        rank = "üë®‚ÄçüöÄ –ì–µ–Ω–µ—Ä–∞–ª –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –≤–æ–π—Å–∫!"
    elif score >= 20:
        rank = "üõ∞Ô∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä!"
    elif score >= 10:
        rank = "üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä!"
    else:
        rank = "üåç –ù–∞—á–∏–Ω–∞—é—â–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å!"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üöÄ"))
    markup.add(types.KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ –±–æ—Ä—Ç–æ–º"))
    markup.add(types.KeyboardButton("–°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
    markup.add(types.KeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    markup.add(types.KeyboardButton("–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"))
    markup.add(types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    markup.add(types.KeyboardButton("–£–≥–∞–¥–∞–π –ø–ª–∞–Ω–µ—Ç—É –ø–æ –ø–æ–≥–æ–¥–µ"))
    markup.add(types.KeyboardButton("–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å: –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞"))
    if manual:
        bot.send_message(chat_id,
            f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!\n\n"
            f"–¢–µ–º–∞: {topic.capitalize()}\n"
            f"–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}\n"
            f"–¢–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {rank}",reply_markup=markup
        )
    else:
        bot.send_message(chat_id,
            f"üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–¢–µ–º–∞: {topic.capitalize()}\n"
            f"–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}\n"
            f"–¢–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {rank}",reply_markup=markup
        )
    user_stats.setdefault(user_id, {"facts": 0, "quizzes": 0, "max_score": 0, "guess_planet": 0, "true_false": 0})
    if score > user_stats[user_id]["max_score"]:
        user_stats[user_id]["max_score"] = score
        save_stats(user_stats)
    if user_id in user_data:
        del user_data[user_id]

bot.polling(none_stop=True)

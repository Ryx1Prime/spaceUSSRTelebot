import telebot
from telebot import types
import random
import json
import requests
import threading

API = 'db53663bae2e3b33d925fcb7279e77a2'
bot = telebot.TeleBot('')
user_data={}
#—Ñ–∞–∫—Ç—ã 
FACTS = [
    "üêï **–°–æ–±–∞–∫–∏-–∫–æ—Å–º–æ–Ω–∞–≤—Ç—ã –ë–µ–ª–∫–∞ –∏ –°—Ç—Ä–µ–ª–∫–∞** (1960) —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—ë—Ç–∞ –∂–∏–≤—ã–º. –°—Ç—Ä–µ–ª–∫–∞ –ø–æ–∑–∂–µ —Ä–æ–¥–∏–ª–∞ –∑–¥–æ—Ä–æ–≤—ã—Ö —â–µ–Ω–∫–æ–≤!",
    "üöÄ **–ü–µ—Ä–≤—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫** (1957) ‚Äî ¬´–°–ø—É—Ç–Ω–∏–∫-1¬ª –≤–µ—Å–∏–ª –≤—Å–µ–≥–æ 84 –∫–≥ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ¬´–±–∏–ø-–±–∏–ø¬ª, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≤–∏–ª–∏ —Ä–∞–¥–∏–æ–ª—é–±–∏—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.",
    "üåï **–¢–∞–π–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –õ—É–Ω—ã** (1959) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è ¬´–õ—É–Ω–∞-3¬ª –≤–ø–µ—Ä–≤—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–ª–∞ –Ω–µ–≤–∏–¥–∏–º—É—é —Å –ó–µ–º–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É –õ—É–Ω—ã, –æ—Ç–∫—Ä—ã–≤ –º–∏—Ä—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç.",
    "üë®‚ÄçüöÄ **108 –º–∏–Ω—É—Ç, –∏–∑–º–µ–Ω–∏–≤—à–∏–µ –º–∏—Ä** (1961) ‚Äî –ü–æ–ª—ë—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞ –¥–ª–∏–ª—Å—è –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å–æ–≤, –Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞ —Å–¥–µ–ª–∞–ª –°–°–°–† –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Ü–µ–º –∫–æ—Å–º–æ—Å–∞. –ï–≥–æ –ø–æ–∑—ã–≤–Ω–æ–π ¬´–ö–µ–¥—Ä¬ª –∑–Ω–∞–ª–∞ –≤—Å—è –ø–ª–∞–Ω–µ—Ç–∞!",
    "üõ∞Ô∏è **–°–ø—É—Ç–Ω–∏–∫-—à–ø–∏–æ–Ω —Å —Å—é—Ä–ø—Ä–∏–∑–æ–º** (1960-–µ) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∏–µ –∞–ø–ø–∞—Ä–∞—Ç—ã ¬´–ó–µ–Ω–∏—Ç¬ª –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏ –∫–∞–ø—Å—É–ª—ã —Å –ø–ª—ë–Ω–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–∫–∞–ª–∏ –≤ —Ç–∞–π–≥–µ —Å –≤–µ—Ä—Ç–æ–ª—ë—Ç–æ–≤. –û–¥–Ω–∞–∂–¥—ã –º–µ–¥–≤–µ–¥–∏ –ø—Ä–∏–Ω—è–ª–∏ –∫–∞–ø—Å—É–ª—É –∑–∞ –º—ë–¥ –∏ –ø–æ–≤—Ä–µ–¥–∏–ª–∏ –µ—ë!",
    "üåå **–†–µ–∫–æ—Ä–¥ –í–µ–Ω–µ—Ä—ã** (1970) ‚Äî ¬´–í–µ–Ω–µ—Ä–∞-7¬ª —Å–æ–≤–µ—Ä—à–∏–ª–∞ –ø–µ—Ä–≤—É—é –º—è–≥–∫—É—é –ø–æ—Å–∞–¥–∫—É –Ω–∞ –∞–¥—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –í–µ–Ω–µ—Ä—ã (465¬∞C!) –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ 23 –º–∏–Ω—É—Ç—ã ‚Äî –ø–æ–¥–≤–∏–≥ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π –º—ã—Å–ª–∏.",
    "üî≠ **–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç–µ–ª–µ—Å–∫–æ–ø-–Ω–µ–≤–∏–¥–∏–º–∫–∞** (1983) ‚Äî ¬´–ê—Å—Ç—Ä–æ–Ω¬ª —Å –∑–µ—Ä–∫–∞–ª–æ–º 80 —Å–º —Å—Ç–∞–ª –∫—Ä—É–ø–Ω–µ–π—à–∏–º —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º —Ç–µ–ª–µ—Å–∫–æ–ø–æ–º —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–∫—Ä—ã–ª —Ç—ã—Å—è—á–∏ –Ω–æ–≤—ã—Ö –≥–∞–ª–∞–∫—Ç–∏–∫.",
    "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —á–µ–ª–Ω–æ–∫** (1988) ‚Äî ¬´–ë—É—Ä–∞–Ω¬ª —Å–æ–≤–µ—Ä—à–∏–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª—ë—Ç –≤–æ–æ–±—â–µ –±–µ–∑ —ç–∫–∏–ø–∞–∂–∞, –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω–∞—è –Ω–∞ –ó–∞–ø–∞–¥–µ.",
    "üëæ **–õ—É–Ω–æ—Ö–æ–¥—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º** (1970-–µ) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∏–µ –ª—É–Ω–æ—Ö–æ–¥—ã –º–æ–≥–ª–∏ ¬´–ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è¬ª –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å –ó–µ–º–ª–∏, –≥—Ä–µ–ª–∏—Å—å —è–¥–µ—Ä–Ω—ã–º –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –Ω–∞ –õ—É–Ω–µ ¬´–∞–≤—Ç–æ–≥—Ä–∞—Ñ—ã¬ª ‚Äî –∑–µ—Ä–∫–∞–ª–∞ –¥–ª—è –ª–∞–∑–µ—Ä–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.",
    "üõ∞Ô∏è **–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫** (1970-–µ) ‚Äî –ö–∞–∂–¥—ã–π –Ω–∞—É—á–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ —Å–µ—Ä–∏–∏ ¬´–ö–æ—Å–º–æ—Å¬ª –Ω–∞ –¥–µ–ª–µ –º–æ–≥ –±—ã—Ç—å –≤–æ–µ–Ω–Ω—ã–º, –∞ –∏—Ö –Ω–∞—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å–µ–∫—Ä–µ—á–∏–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å!",
    "üå† **–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è-–¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—å** (1986-2001) ‚Äî ¬´–ú–∏—Ä¬ª –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∞ –≤ 3 —Ä–∞–∑–∞ –¥–æ–ª—å—à–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –∏ —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤—ã–º ¬´–∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –¥–æ–º–æ–º¬ª –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —ç–∫–∏–ø–∞–∂–µ–π.",
    "‚ö° **–≠–Ω–µ—Ä–≥–∏—è —è–¥—Ä–∞ –≤ –∫–æ—Å–º–æ—Å–µ** (1960-–µ) ‚Äî –°–°–°–† –∑–∞–ø—É—Å–∫–∞–ª —Å–ø—É—Ç–Ω–∏–∫–∏ —Å —è–¥–µ—Ä–Ω—ã–º–∏ —Ä–µ–∞–∫—Ç–æ—Ä–∞–º–∏ –Ω–∞ –±–æ—Ä—Ç—É. ¬´–ö–æ—Å–º–æ—Å-1867¬ª –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –æ—Ä–±–∏—Ç–µ —Ü–µ–ª—ã–π –≥–æ–¥!",
    "üß™ **–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–ª—Ö–∏–º–∏—è** (1990-–µ) ‚Äî –ù–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–ú–∏—Ä¬ª –≤—ã—Ä–∞—â–∏–≤–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –∑–µ–º–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
    "üõ∏ **–û—Ö–æ—Ç–∞ –∑–∞ –ù–õ–û** (1978) ‚Äî –°–æ–≤–µ—Ç—Å–∫–∏–µ –í–í–° –∏–º–µ–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–∏–ª–æ—Ç–æ–≤ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å ¬´–∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–¥—É—à–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏¬ª ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å—Å–µ–∫—Ä–µ—Ç–∏–ª–∏ –≤ 2000-—Ö.",
    "üåë **–õ—É–Ω–Ω—ã–µ —Ä–æ–±–æ—Ç—ã-—Ä–∞–∑–≤–µ–¥—á–∏–∫–∏** (1970) ‚Äî –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ª—É–Ω–æ—Ö–æ–¥–æ–≤ –°–°–°–† —Å–±—Ä–æ—Å–∏–ª –Ω–∞ –õ—É–Ω—É –¥–≤–∞ ¬´—à–∞–≥–∞—é—â–∏—Ö¬ª –∞–ø–ø–∞—Ä–∞—Ç–∞ –ü—Ä–û–ü-–ú ‚Äî –æ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ –ª—ã–∂–∞—Ö!",
    "üöÄ **–†–∞–∫–µ—Ç–∞, –æ–ø–µ—Ä–µ–¥–∏–≤—à–∞—è –≤—Ä–µ–º—è** (1960-–µ) ‚Äî ¬´–ù-1¬ª –º–æ–≥–ª–∞ –±—ã –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç—Å–∫–∏—Ö –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ –Ω–∞ –õ—É–Ω—É, –Ω–æ –µ—ë –¥–≤–∏–≥–∞—Ç–µ–ª–∏ (30 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!) –æ–∫–∞–∑–∞–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º–∏ –¥–ª—è —Å–≤–æ–µ–π —ç–ø–æ—Ö–∏."
]
@bot.message_handler(commands=['start'])
def button_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üöÄ")
    markup.add(btn1)
    btn2 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ –±–æ—Ä—Ç–æ–º")
    markup.add(btn2)
    btn3 = types.KeyboardButton("–°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    markup.add(btn3)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å! –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –≤–µ–ª–∏–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –°–°–°–† –≤ –∫–æ—Å–º–æ—Å–µ. üåå\n\n –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å", reply_markup = markup)
    
@bot.message_handler(func=lambda message:message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üöÄ')
def send_fact(message):
    fact = random.choice(FACTS)
    bot.send_message(message.chat.id, f"üì° <b>–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –°–°–°–†:</b>\n\n{fact}", parse_mode="HTML")
#–ø–æ–≥–æ–¥–∞
@bot.message_handler(func=lambda message: message.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ –±–æ—Ä—Ç–æ–º")
def ask_city(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–≥–æ—Ä–æ–¥–∞</b> –º–∏–º–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ø—Ä–æ–ª–µ—Ç–∞–µ–º", parse_mode="HTML")
    bot.register_next_step_handler(message,send_weather)
def send_weather(message):
    city = message.text.strip().lower()
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric')
    if res.status_code == 200:
        data = json.loads(res.text)
        temp = data["main"]["temp"]
        bot.reply_to(message, f"–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞: {temp}‚ÑÉ")
    else:
        bot.reply_to(message, "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∞ –ó–µ–º–ª–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥)")
        bot.register_next_step_handler(message, ask_city)

#–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
@bot.message_handler(func=lambda message:message.text == "–°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
def choose_tema(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn_astronauts = types.KeyboardButton("–ö–æ—Å–º–æ–Ω–∞–≤—Ç—ã")
    btn_satellites = types.KeyboardButton("–°–ø—É—Ç–Ω–∏–∫–∏")
    btn_stations = types.KeyboardButton("–°—Ç–∞–Ω—Ü–∏–∏")
    btn_tech = types.KeyboardButton("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    markup.add(btn_astronauts, btn_satellites, btn_stations, btn_tech)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã', reply_markup=markup)
def load_questions(topic):
    with open(f"{topic}.json", "r", encoding="utf-8") as file:
        data = json.load(file)
        questions = data["questions"]
        # —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 6 –ª–µ–≥–∫–∏—Ö, 8 —Å—Ä–µ–¥–Ω–∏—Ö, 6 —Å–ª–æ–∂–Ω—ã—Ö, —Ö–∑ —Ç–∞–∫ —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–æ
        return {
            "easy": questions[:6],
            "medium": questions[6:14],
            "hard": questions[14:]
        }

@bot.message_handler(func=lambda msg: msg.text in ["–ö–æ—Å–º–æ–Ω–∞–≤—Ç—ã", "–°–ø—É—Ç–Ω–∏–∫–∏", "–°—Ç–∞–Ω—Ü–∏–∏", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"])
def start_quiz(message):
    user_id = message.from_user.id
    topic = message.text.lower()
    #–Ω–∞–¥–æ
    user_data[user_id] = {
        "topic": topic,
        "score": 0,
        "questions": load_questions(topic),
        "current_question": None,
        "timer": None
    }
    ask_difficulty(message.chat.id, user_id)

def ask_difficulty(chat_id, user_id):
    markup = types.ReplyKeyboardMarkup(row_width=3)
    easy_btn = types.KeyboardButton("üü¢ –õ—ë–≥–∫–∏–π")
    medium_btn = types.KeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π")
    hard_btn = types.KeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π")
    markup.add(easy_btn, medium_btn, hard_btn)
    # —Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å, —á–∏—Å—Ç–æ –≤–∏–∑—É–∞–ª—å—á–∏–∫
    questions_left = ""
    for diff, questions in user_data[user_id]["questions"].items():
        if questions:
            emoji = "üü¢" if diff == "easy" else "üü°" if diff == "medium" else "üî¥"
            questions_left += f"{emoji} {len(questions)} | "
    bot.send_message(chat_id,f"–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:\n(–û—Å—Ç–∞–ª–æ—Å—å: {questions_left[:-2]})",reply_markup=markup)
@bot.message_handler(func=lambda msg: msg.text in ["üü¢ –õ—ë–≥–∫–∏–π", "üü° –°—Ä–µ–¥–Ω–∏–π", "üî¥ –°–ª–æ–∂–Ω—ã–π"])
def set_difficulty(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return choose_tema(message)
    difficulty_map = {
        "üü¢ –õ—ë–≥–∫–∏–π": "easy",
        "üü° –°—Ä–µ–¥–Ω–∏–π": "medium",
        "üî¥ –°–ª–æ–∂–Ω—ã–π": "hard"
    }
    difficulty = difficulty_map[message.text]
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∫—Ä—á –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∫ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏–Ω–∞—á–µ –≥–∞–±–µ–ª–ª–∞
    if not user_data[user_id]["questions"][difficulty]:
        bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å—ã —É—Ä–æ–≤–Ω—è {message.text} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        return ask_difficulty(message.chat.id, user_id)
    
    # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –±–µ—Ä—ë–º
    question = user_data[user_id]["questions"][difficulty].pop(0)
    user_data[user_id]["current_question"] = {
        "question": question,
        "difficulty": difficulty
    }
    send_question(message.chat.id, user_id)

def send_question(chat_id, user_id):
    question_data = user_data[user_id]["current_question"]
    question = question_data["question"]
    difficulty = question_data["difficulty"]
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫), –≤–¥—Ä—É–≥ –≥–æ–≥–∞ —Å–¥–µ–ª–∞–ª —Ç–∞–∫ —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ
    options = question["options"]
    random.shuffle(options)
    markup = types.InlineKeyboardMarkup()
    row = []
    for i, option in enumerate(options):
        callback_data = f"ans_{i}_{option}"
        row.append(types.InlineKeyboardButton(option, callback_data=callback_data))
        if len(row) == 2:  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            markup.row(*row)
            row = []
    #—Ç—É—Ç –ø–æ–¥—Å–∫–∞–∑–∞–ª –¥–∏–ø—Å–∏–∫ —á—Ç–æ —Ç–∞–∫ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if row:
        markup.row(*row)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    diff_emoji = "üü¢" if difficulty == "easy" else "üü°" if difficulty == "medium" else "üî¥"
    bot.send_message(chat_id,f"{diff_emoji} –í–æ–ø—Ä–æ—Å ({difficulty.capitalize()}):\n\n{question['question']}",reply_markup=markup)
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä (30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç), —ç—Ç–æ–≥–æ —è —Ä–æ—Ç –µ–±–∞–ª
    if user_data[user_id].get("timer"):
        user_data[user_id]["timer"].cancel()
    timer = threading.Timer(30.0, timeout_question, args=[chat_id, user_id])
    user_data[user_id]["timer"] = timer
    timer.start()
def timeout_question(chat_id, user_id):
    if user_id in user_data:
        question = user_data[user_id]["current_question"]["question"]
        bot.send_message(chat_id,f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}\n{question['explanation']}")
        ask_difficulty(chat_id, user_id)
@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        return
    # –ø–∞—Ä—Å–∏–º callback_data: ans_–∏–Ω–¥–µ–∫—Å_—Ç–µ–∫—Å—Ç
    parts = call.data.split("_")
    selected_idx = int(parts[1])
    selected_text = "_".join(parts[2:])
    question = user_data[user_id]["current_question"]["question"]
    difficulty = user_data[user_id]["current_question"]["difficulty"]
    # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if user_data[user_id].get("timer"):
        user_data[user_id]["timer"].cancel()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç + –±–∞–ª–ª—ã
    if selected_text == question["answer"]:
        points = {"easy": 1, "medium": 3, "hard": 5}[difficulty]
        user_data[user_id]["score"] += points
        response = f"‚úÖ –í–µ—Ä–Ω–æ! +{points} –±–∞–ª–ª–æ–≤"
    else:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}"
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –æ—Ç–≤–µ—Ç–µ)
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n\n{response}",
            reply_markup=None
        )
    except:
        pass
    # –¥–æ–ø –∏–Ω—Ñ–∞
    bot.send_message(call.message.chat.id,f"üìö –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{question['explanation']}\n\n–¢–≤–æ–π —Å—á–µ—Ç: {user_data[user_id]['score']}")
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
    total_questions_left = sum(len(q) for q in user_data[user_id]["questions"].values())
    if total_questions_left == 0:
        finish_quiz(call.message.chat.id, user_id)
    else:
        ask_difficulty(call.message.chat.id, user_id)

def finish_quiz(chat_id, user_id):
    score = user_data[user_id]["score"]
    topic = user_data[user_id]["topic"]
    
    # "–∑–≤–∞–Ω–∏–µ" –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞–ª–ª–æ–≤, –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è —à—Ç—É—á–∫–∞
    if score >= 30:
        rank = "üë®‚ÄçüöÄ –ì–µ–Ω–µ—Ä–∞–ª –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –≤–æ–π—Å–∫!"
    elif score >= 20:
        rank = "üõ∞Ô∏è –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä!"
    elif score >= 10:
        rank = "üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä!"
    else:
        rank = "üåç –ù–∞—á–∏–Ω–∞—é—â–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å!"
    
    #–±—ç–∫–∞–µ–º—Å—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üöÄ"))
    markup.add(types.KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ –±–æ—Ä—Ç–æ–º"))
    markup.add(types.KeyboardButton("–°—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
    
    bot.send_message(chat_id,
        f"üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–¢–µ–º–∞: {topic.capitalize()}\n"
        f"–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}\n"
        f"–¢–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {rank}",reply_markup=markup
    )
    if user_id in user_data:
        del user_data[user_id]
bot.polling(none_stop=True)